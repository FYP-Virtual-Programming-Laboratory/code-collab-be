# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ContributionStats {
  contributorId: Int!
  contributions: Int!
}

type User {
  id: Int!
  username: String!
  email: String!
  lastName: String!
  firstName: String!
}

type Change {
  id: Int!
  versionId: Int!
  madeBy: User!
  content: String!
  lineNumber: Int!
  position: Int!
  operation: String!
}

type Version {
  id: Int!
  createdAt: DateTime!
  committedBy: User!
  changes: [Change!]!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type File {
  id: Int!
  path: String!

  """File size in bytes"""
  size: Int
  createdAt: DateTime!
  lastModified: DateTime!
  versions: [Version!]!
}

type FileMeta {
  id: Int!
  path: String!

  """File size in bytes"""
  size: Int
  createdAt: DateTime!
  lastModified: DateTime!
  versions: [Version!]!
  contributorIds: [Int!]!
  contributionStats: [ContributionStats!]!
}

type Project {
  id: Int!
  name: String!
  createdAt: DateTime!
  createdBy: User!
  members: [User!]!
}

type Query {
  """
  List all files in a project. Returns an empty array if no files are found or if project does not exist.
  """
  listFiles(projectId: Int!): [File!]!

  """
  Get file metadata by file `id`. Returns `null` if file with the id does not exist.
  """
  getFileMeta(fileId: Int!): FileMeta

  """
  Get file content by file `id`. Returns `null` if file with the id does not exist.
  """
  getFileContent(fileId: Int!): String

  """
  Get all versions of a file by file `id`. Returns an empty array if file with the id does not exist.
  """
  getFileVersions(fileId: Int!): [Version!]!

  """
  Find a project by its `id`. If `null` is returned, then the project could not be found.
  """
  getProject(id: Int!): Project

  """
  Find a project by its `sessionId`. If `null` is returned, then the project could not be found.
  """
  getProjectBySessionId(sessionId: String!): Project

  """
  Find a user by `id`. Returns null if user with specified `id` cannot be found.
  """
  getUser(id: Int!): User

  """Find multiple users by their `id`s. Returns only the users it finds."""
  getUsers(ids: [Int!]!): [User!]!
}

type Mutation {
  """Create a new project."""
  createProject(
    sessionId: String!
    creatorId: Int!
    name: String!

    """
    List of user IDs to add to the project. The creator id may not be added.
    """
    memberIds: [Int!]
  ): Project!
}